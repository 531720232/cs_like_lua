========================================
Rules
========================================

0       <Block or Semi> ::= <Block>
1       <Block or Semi> ::= ';'
2       <Valid ID> ::= Identifier
3       <Valid ID> ::= this
4       <Valid ID> ::= base
5       <Valid ID> ::= <Base Type>
6       <Qualified ID> ::= <Valid ID> <Member List>
7       <Member List> ::= <Member List> MemberName
8       <Member List> ::= 
9       <Semicolon Opt> ::= ';'
10      <Semicolon Opt> ::= 
11      <Literal> ::= true
12      <Literal> ::= false
13      <Literal> ::= DecLiteral
14      <Literal> ::= HexLiteral
15      <Literal> ::= RealLiteral
16      <Literal> ::= CharLiteral
17      <Literal> ::= StringLiteral
18      <Literal> ::= null
19      <Type> ::= <Non Array Type>
20      <Type> ::= <Non Array Type> '*'
21      <Type> ::= <Non Array Type> <Rank Specifiers>
22      <Type> ::= <Non Array Type> <Rank Specifiers> '*'
23      <Pointer Opt> ::= '*'
24      <Pointer Opt> ::= 
25      <Non Array Type> ::= <Qualified ID>
26      <Base Type> ::= <Other Type>
27      <Base Type> ::= <Integral Type>
28      <Other Type> ::= float
29      <Other Type> ::= double
30      <Other Type> ::= decimal
31      <Other Type> ::= bool
32      <Other Type> ::= void
33      <Other Type> ::= object
34      <Other Type> ::= string
35      <Other Type> ::= dynamic
36      <Integral Type> ::= sbyte
37      <Integral Type> ::= byte
38      <Integral Type> ::= short
39      <Integral Type> ::= ushort
40      <Integral Type> ::= int
41      <Integral Type> ::= uint
42      <Integral Type> ::= long
43      <Integral Type> ::= ulong
44      <Integral Type> ::= char
45      <Rank Specifiers Opt> ::= <Rank Specifiers Opt> <Rank Specifier>
46      <Rank Specifiers Opt> ::= 
47      <Rank Specifiers> ::= <Rank Specifiers> <Rank Specifier>
48      <Rank Specifiers> ::= <Rank Specifier>
49      <Rank Specifier> ::= '[' <Dim Separators> ']'
50      <Dim Separators> ::= <Dim Separators> ','
51      <Dim Separators> ::= 
52      <Expression Opt> ::= <Expression>
53      <Expression Opt> ::= 
54      <Expression List> ::= <Expression>
55      <Expression List> ::= <Expression> ',' <Expression List>
56      <Expression> ::= <Conditional Exp> '=' <Expression>
57      <Expression> ::= <Conditional Exp> '+=' <Expression>
58      <Expression> ::= <Conditional Exp> '-=' <Expression>
59      <Expression> ::= <Conditional Exp> '*=' <Expression>
60      <Expression> ::= <Conditional Exp> '/=' <Expression>
61      <Expression> ::= <Conditional Exp> '^=' <Expression>
62      <Expression> ::= <Conditional Exp> '&=' <Expression>
63      <Expression> ::= <Conditional Exp> '|=' <Expression>
64      <Expression> ::= <Conditional Exp> '%=' <Expression>
65      <Expression> ::= <Conditional Exp> '<<=' <Expression>
66      <Expression> ::= <Conditional Exp> '>>=' <Expression>
67      <Expression> ::= <Conditional Exp>
68      <Conditional Exp> ::= <Or Exp> '?' <Or Exp> ':' <Conditional Exp>
69      <Conditional Exp> ::= <Or Exp>
70      <Or Exp> ::= <Or Exp> '||' <And Exp>
71      <Or Exp> ::= <And Exp>
72      <And Exp> ::= <And Exp> '&&' <Logical Or Exp>
73      <And Exp> ::= <Logical Or Exp>
74      <Logical Or Exp> ::= <Logical Or Exp> '|' <Logical Xor Exp>
75      <Logical Or Exp> ::= <Logical Xor Exp>
76      <Logical Xor Exp> ::= <Logical Xor Exp> '^' <Logical And Exp>
77      <Logical Xor Exp> ::= <Logical And Exp>
78      <Logical And Exp> ::= <Logical And Exp> '&' <Equality Exp>
79      <Logical And Exp> ::= <Equality Exp>
80      <Equality Exp> ::= <Equality Exp> '==' <Compare Exp>
81      <Equality Exp> ::= <Equality Exp> '!=' <Compare Exp>
82      <Equality Exp> ::= <Compare Exp>
83      <Compare Exp> ::= <Compare Exp> '<' <Shift Exp>
84      <Compare Exp> ::= <Compare Exp> '>' <Shift Exp>
85      <Compare Exp> ::= <Compare Exp> '<=' <Shift Exp>
86      <Compare Exp> ::= <Compare Exp> '>=' <Shift Exp>
87      <Compare Exp> ::= <Compare Exp> is <Type>
88      <Compare Exp> ::= <Compare Exp> as <Type>
89      <Compare Exp> ::= <Shift Exp>
90      <Shift Exp> ::= <Shift Exp> '<<' <Add Exp>
91      <Shift Exp> ::= <Shift Exp> '>>' <Add Exp>
92      <Shift Exp> ::= <Add Exp>
93      <Add Exp> ::= <Add Exp> '+' <Mult Exp>
94      <Add Exp> ::= <Add Exp> '-' <Mult Exp>
95      <Add Exp> ::= <Mult Exp>
96      <Mult Exp> ::= <Mult Exp> '*' <Unary Exp>
97      <Mult Exp> ::= <Mult Exp> '/' <Unary Exp>
98      <Mult Exp> ::= <Mult Exp> '%' <Unary Exp>
99      <Mult Exp> ::= <Unary Exp>
100     <Unary Exp> ::= '!' <Unary Exp>
101     <Unary Exp> ::= '~' <Unary Exp>
102     <Unary Exp> ::= '-' <Unary Exp>
103     <Unary Exp> ::= '++' <Unary Exp>
104     <Unary Exp> ::= '--' <Unary Exp>
105     <Unary Exp> ::= '(' <Expression> ')' <Object Exp>
106     <Unary Exp> ::= <Object Exp>
107     <Object Exp> ::= delegate '(' <Formal Param List Opt> ')' <Block>
108     <Object Exp> ::= <Primary Array Creation Exp>
109     <Object Exp> ::= <Method Exp>
110     <Primary Array Creation Exp> ::= new <Non Array Type> '[' <Expression List> ']' <Rank Specifiers Opt> <Array Initializer Opt>
111     <Primary Array Creation Exp> ::= new <Non Array Type> <Rank Specifiers> <Array Initializer>
112     <Method Exp> ::= <Method Exp> <Method>
113     <Method Exp> ::= <Primary Exp>
114     <Primary Exp> ::= typeof '(' <Type> ')'
115     <Primary Exp> ::= sizeof '(' <Type> ')'
116     <Primary Exp> ::= checked '(' <Expression> ')'
117     <Primary Exp> ::= unchecked '(' <Expression> ')'
118     <Primary Exp> ::= new <Non Array Type> '(' <Arg List Opt> ')'
119     <Primary Exp> ::= <Primary>
120     <Primary Exp> ::= '(' <Expression> ')'
121     <Primary> ::= <Valid ID>
122     <Primary> ::= <Valid ID> '(' <Arg List Opt> ')'
123     <Primary> ::= <Literal>
124     <Arg List Opt> ::= <Arg List>
125     <Arg List Opt> ::= 
126     <Arg List> ::= <Arg List> ',' <Argument>
127     <Arg List> ::= <Argument>
128     <Argument> ::= <Expression>
129     <Argument> ::= ref <Expression>
130     <Argument> ::= out <Expression>
131     <Stm List> ::= <Stm List> <Statement>
132     <Stm List> ::= <Statement>
133     <Statement> ::= Identifier ':'
134     <Statement> ::= <Local Var Decl> ';'
135     <Statement> ::= if '(' <Expression> ')' <Statement>
136     <Statement> ::= if '(' <Expression> ')' <Then Stm> else <Statement>
137     <Statement> ::= for '(' <For Init Opt> ';' <For Condition Opt> ';' <For Iterator Opt> ')' <Statement>
138     <Statement> ::= foreach '(' <Type> Identifier in <Expression> ')' <Statement>
139     <Statement> ::= while '(' <Expression> ')' <Statement>
140     <Statement> ::= lock '(' <Expression> ')' <Statement>
141     <Statement> ::= using '(' <Resource> ')' <Statement>
142     <Statement> ::= fixed '(' <Type> <Fixed Ptr Decs> ')' <Statement>
143     <Statement> ::= delegate '(' <Formal Param List Opt> ')' <Statement>
144     <Statement> ::= <Normal Stm>
145     <Then Stm> ::= if '(' <Expression> ')' <Then Stm> else <Then Stm>
146     <Then Stm> ::= for '(' <For Init Opt> ';' <For Condition Opt> ';' <For Iterator Opt> ')' <Then Stm>
147     <Then Stm> ::= foreach '(' <Type> Identifier in <Expression> ')' <Then Stm>
148     <Then Stm> ::= while '(' <Expression> ')' <Then Stm>
149     <Then Stm> ::= lock '(' <Expression> ')' <Then Stm>
150     <Then Stm> ::= using '(' <Resource> ')' <Then Stm>
151     <Then Stm> ::= fixed '(' <Type> <Fixed Ptr Decs> ')' <Then Stm>
152     <Then Stm> ::= delegate '(' <Formal Param List Opt> ')' <Then Stm>
153     <Then Stm> ::= <Normal Stm>
154     <Normal Stm> ::= switch '(' <Expression> ')' '{' <Switch Sections Opt> '}'
155     <Normal Stm> ::= do <Normal Stm> while '(' <Expression> ')' ';'
156     <Normal Stm> ::= try <Block> <Catch Clauses> <Finally Clause Opt>
157     <Normal Stm> ::= checked <Block>
158     <Normal Stm> ::= unchecked <Block>
159     <Normal Stm> ::= unsafe <Block>
160     <Normal Stm> ::= break ';'
161     <Normal Stm> ::= continue ';'
162     <Normal Stm> ::= goto Identifier ';'
163     <Normal Stm> ::= goto case <Expression> ';'
164     <Normal Stm> ::= goto default ';'
165     <Normal Stm> ::= return <Expression Opt> ';'
166     <Normal Stm> ::= throw <Expression Opt> ';'
167     <Normal Stm> ::= <Statement Exp> ';'
168     <Normal Stm> ::= ';'
169     <Normal Stm> ::= <Block>
170     <Block> ::= '{' <Stm List> '}'
171     <Block> ::= '{' '}'
172     <Variable Decs> ::= <Variable Declarator>
173     <Variable Decs> ::= <Variable Decs> ',' <Variable Declarator>
174     <Variable Declarator> ::= Identifier
175     <Variable Declarator> ::= Identifier '=' <Variable Initializer>
176     <Variable Initializer> ::= <Expression>
177     <Variable Initializer> ::= <Array Initializer>
178     <Variable Initializer> ::= stackalloc <Non Array Type> '[' <Non Array Type> ']'
179     <Constant Declarators> ::= <Constant Declarator>
180     <Constant Declarators> ::= <Constant Declarators> ',' <Constant Declarator>
181     <Constant Declarator> ::= Identifier '=' <Expression>
182     <Switch Sections Opt> ::= <Switch Sections Opt> <Switch Section>
183     <Switch Sections Opt> ::= 
184     <Switch Section> ::= <Switch Labels> <Stm List>
185     <Switch Labels> ::= <Switch Label>
186     <Switch Labels> ::= <Switch Labels> <Switch Label>
187     <Switch Label> ::= case <Expression> ':'
188     <Switch Label> ::= default ':'
189     <For Init Opt> ::= <Local Var Decl>
190     <For Init Opt> ::= <Statement Exp List>
191     <For Init Opt> ::= 
192     <For Iterator Opt> ::= <Statement Exp List>
193     <For Iterator Opt> ::= 
194     <For Condition Opt> ::= <Expression>
195     <For Condition Opt> ::= 
196     <Statement Exp List> ::= <Statement Exp List> ',' <Statement Exp>
197     <Statement Exp List> ::= <Statement Exp>
198     <Catch Clauses> ::= <Catch Clause> <Catch Clauses>
199     <Catch Clauses> ::= 
200     <Catch Clause> ::= catch '(' <Qualified ID> Identifier ')' <Block>
201     <Catch Clause> ::= catch '(' <Qualified ID> ')' <Block>
202     <Catch Clause> ::= catch <Block>
203     <Finally Clause Opt> ::= finally <Block>
204     <Finally Clause Opt> ::= 
205     <Resource> ::= <Local Var Decl>
206     <Resource> ::= <Statement Exp>
207     <Fixed Ptr Decs> ::= <Fixed Ptr Dec>
208     <Fixed Ptr Decs> ::= <Fixed Ptr Decs> ',' <Fixed Ptr Dec>
209     <Fixed Ptr Dec> ::= Identifier '=' <Expression>
210     <Local Var Decl> ::= <Qualified ID> <Rank Specifiers> <Pointer Opt> <Variable Decs>
211     <Local Var Decl> ::= <Qualified ID> <Pointer Opt> <Variable Decs>
212     <Statement Exp> ::= <Qualified ID> '(' <Arg List Opt> ')'
213     <Statement Exp> ::= <Qualified ID> '(' <Arg List Opt> ')' <Methods Opt> <Assign Tail>
214     <Statement Exp> ::= <Qualified ID> '[' <Expression List> ']' <Methods Opt> <Assign Tail>
215     <Statement Exp> ::= <Qualified ID> '->' Identifier <Methods Opt> <Assign Tail>
216     <Statement Exp> ::= <Qualified ID> '++' <Methods Opt> <Assign Tail>
217     <Statement Exp> ::= <Qualified ID> '--' <Methods Opt> <Assign Tail>
218     <Statement Exp> ::= <Qualified ID> <Assign Tail>
219     <Assign Tail> ::= '++'
220     <Assign Tail> ::= '--'
221     <Assign Tail> ::= '=' <Expression>
222     <Assign Tail> ::= '+=' <Expression>
223     <Assign Tail> ::= '-=' <Expression>
224     <Assign Tail> ::= '*=' <Expression>
225     <Assign Tail> ::= '/=' <Expression>
226     <Assign Tail> ::= '^=' <Expression>
227     <Assign Tail> ::= '&=' <Expression>
228     <Assign Tail> ::= '|=' <Expression>
229     <Assign Tail> ::= '%=' <Expression>
230     <Assign Tail> ::= '<<=' <Expression>
231     <Assign Tail> ::= '>>=' <Expression>
232     <Methods Opt> ::= <Methods Opt> <Method>
233     <Methods Opt> ::= 
234     <Method> ::= MemberName
235     <Method> ::= MemberName '(' <Arg List Opt> ')'
236     <Method> ::= '[' <Expression List> ']'
237     <Method> ::= '->' Identifier
238     <Method> ::= '++'
239     <Method> ::= '--'
240     <var> ::= var
241     <var> ::= global
242     <var_var> ::= <var> Identifier
243     <var_var> ::= <var> Identifier '=' <Variable Initializer>
244     <methodcall> ::= <Formal Param List Opt>
245     <eval item> ::= <Stm List>
246     <eval item> ::= 
247     <Compilation Unit> ::= <Using List> <Compilation Items> <eval item>
248     <Using List> ::= <Using List> <Using Directive>
249     <Using List> ::= 
250     <Using Directive> ::= using Identifier '=' <Qualified ID> ';'
251     <Using Directive> ::= using <Qualified ID> ';'
252     <Compilation Items> ::= <Compilation Items> <Compilation Item>
253     <Compilation Items> ::= 
254     <Compilation Item> ::= <Namespace Dec>
255     <Compilation Item> ::= <Namespace Item>
256     <Namespace Dec> ::= <Attrib Opt> namespace <Qualified ID> '{' <Using List> <Namespace Items> '}' <Semicolon Opt>
257     <Namespace Items> ::= <Namespace Items> <Namespace Item>
258     <Namespace Items> ::= 
259     <Namespace Item> ::= <Constant Dec>
260     <Namespace Item> ::= <Field Dec>
261     <Namespace Item> ::= <Method Dec>
262     <Namespace Item> ::= <Property Dec>
263     <Namespace Item> ::= <Type Decl>
264     <Type Decl> ::= <Class Decl>
265     <Type Decl> ::= <Struct Decl>
266     <Type Decl> ::= <Interface Decl>
267     <Type Decl> ::= <Enum Decl>
268     <Type Decl> ::= <Delegate Decl>
269     <Header> ::= <Attrib Opt> <Access Opt> <Modifier List Opt>
270     <Access Opt> ::= private
271     <Access Opt> ::= protected
272     <Access Opt> ::= public
273     <Access Opt> ::= internal
274     <Access Opt> ::= 
275     <Modifier List Opt> ::= <Modifier List Opt> <Modifier>
276     <Modifier List Opt> ::= 
277     <Modifier> ::= abstract
278     <Modifier> ::= extern
279     <Modifier> ::= new
280     <Modifier> ::= override
281     <Modifier> ::= partial
282     <Modifier> ::= readonly
283     <Modifier> ::= sealed
284     <Modifier> ::= static
285     <Modifier> ::= unsafe
286     <Modifier> ::= virtual
287     <Modifier> ::= volatile
288     <Class Decl> ::= <Header> class Identifier <Class Base Opt> '{' <Class Item Decs Opt> '}' <Semicolon Opt>
289     <Class Base Opt> ::= ':' <Class Base List>
290     <Class Base Opt> ::= 
291     <Class Base List> ::= <Class Base List> ',' <Non Array Type>
292     <Class Base List> ::= <Non Array Type>
293     <Class Item Decs Opt> ::= <Class Item Decs Opt> <Class Item>
294     <Class Item Decs Opt> ::= 
295     <Class Item> ::= <Constant Dec>
296     <Class Item> ::= <Field Dec>
297     <Class Item> ::= <Method Dec>
298     <Class Item> ::= <Property Dec>
299     <Class Item> ::= <Event Dec>
300     <Class Item> ::= <Indexer Dec>
301     <Class Item> ::= <Operator Dec>
302     <Class Item> ::= <Constructor Dec>
303     <Class Item> ::= <Destructor Dec>
304     <Class Item> ::= <Type Decl>
305     <Constant Dec> ::= <Header> const <Type> <Constant Declarators> ';'
306     <Field Dec> ::= <Header> <Type> <Variable Decs> ';'
307     <Method Dec> ::= <Header> <Type> <Qualified ID> '(' <Formal Param List Opt> ')' <Block or Semi>
308     <Formal Param List Opt> ::= <Formal Param List>
309     <Formal Param List Opt> ::= 
310     <Formal Param List> ::= <Formal Param>
311     <Formal Param List> ::= <Formal Param List> ',' <Formal Param>
312     <Formal Param> ::= <Attrib Opt> <Type> Identifier
313     <Formal Param> ::= <Attrib Opt> ref <Type> Identifier
314     <Formal Param> ::= <Attrib Opt> out <Type> Identifier
315     <Formal Param> ::= <Attrib Opt> params <Type> Identifier
316     <Property Dec> ::= <Header> <Type> <Qualified ID> '{' <Accessor Dec> '}'
317     <Accessor Dec> ::= <Access Opt> get <Block or Semi>
318     <Accessor Dec> ::= <Access Opt> get <Block or Semi> <Access Opt> set <Block or Semi>
319     <Accessor Dec> ::= <Access Opt> set <Block or Semi>
320     <Accessor Dec> ::= <Access Opt> set <Block or Semi> <Access Opt> get <Block or Semi>
321     <Event Dec> ::= <Header> event <Type> <Variable Decs> ';'
322     <Event Dec> ::= <Header> event <Type> <Qualified ID> '{' <Event Accessor Decs> '}'
323     <Event Accessor Decs> ::= add <Block or Semi>
324     <Event Accessor Decs> ::= add <Block or Semi> remove <Block or Semi>
325     <Event Accessor Decs> ::= remove <Block or Semi>
326     <Event Accessor Decs> ::= remove <Block or Semi> add <Block or Semi>
327     <Indexer Dec> ::= <Header> <Type> <Qualified ID> '[' <Formal Param List> ']' '{' <Accessor Dec> '}'
328     <Operator Dec> ::= <Header> <Overload Operator Decl> <Block or Semi>
329     <Operator Dec> ::= <Header> <Conversion Operator Decl> <Block or Semi>
330     <Overload Operator Decl> ::= <Type> operator <Overload Op> '(' <Type> Identifier ')'
331     <Overload Operator Decl> ::= <Type> operator <Overload Op> '(' <Type> Identifier ',' <Type> Identifier ')'
332     <Conversion Operator Decl> ::= implicit operator <Type> '(' <Type> Identifier ')'
333     <Conversion Operator Decl> ::= explicit operator <Type> '(' <Type> Identifier ')'
334     <Overload Op> ::= '+'
335     <Overload Op> ::= '-'
336     <Overload Op> ::= '!'
337     <Overload Op> ::= '~'
338     <Overload Op> ::= '++'
339     <Overload Op> ::= '--'
340     <Overload Op> ::= true
341     <Overload Op> ::= false
342     <Overload Op> ::= '*'
343     <Overload Op> ::= '/'
344     <Overload Op> ::= '%'
345     <Overload Op> ::= '&'
346     <Overload Op> ::= '|'
347     <Overload Op> ::= '^'
348     <Overload Op> ::= '<<'
349     <Overload Op> ::= '>>'
350     <Overload Op> ::= '=='
351     <Overload Op> ::= '!='
352     <Overload Op> ::= '>'
353     <Overload Op> ::= '<'
354     <Overload Op> ::= '>='
355     <Overload Op> ::= '<='
356     <Constructor Dec> ::= <Header> <Constructor Declarator> <Block or Semi>
357     <Constructor Declarator> ::= Identifier '(' <Formal Param List Opt> ')' <Constructor Init Opt>
358     <Constructor Init Opt> ::= <Constructor Init>
359     <Constructor Init Opt> ::= 
360     <Constructor Init> ::= ':' base '(' <Arg List Opt> ')'
361     <Constructor Init> ::= ':' this '(' <Arg List Opt> ')'
362     <Destructor Dec> ::= <Header> '~' Identifier '(' ')' <Block>
363     <Struct Decl> ::= <Header> struct Identifier <Class Base Opt> '{' <Class Item Decs Opt> '}' <Semicolon Opt>
364     <Array Initializer Opt> ::= <Array Initializer>
365     <Array Initializer Opt> ::= 
366     <Array Initializer> ::= '{' <Variable Initializer List Opt> '}'
367     <Array Initializer> ::= '{' <Variable Initializer List> ',' '}'
368     <Variable Initializer List Opt> ::= <Variable Initializer List>
369     <Variable Initializer List Opt> ::= 
370     <Variable Initializer List> ::= <Variable Initializer>
371     <Variable Initializer List> ::= <Variable Initializer List> ',' <Variable Initializer>
372     <Interface Decl> ::= <Header> interface Identifier <Interface Base Opt> '{' <Interface Item Decs Opt> '}' <Semicolon Opt>
373     <Interface Base Opt> ::= ':' <Class Base List>
374     <Interface Base Opt> ::= 
375     <Interface Item Decs Opt> ::= <Interface Item Decs Opt> <Interface Item Dec>
376     <Interface Item Decs Opt> ::= 
377     <Interface Item Dec> ::= <Interface Method Dec>
378     <Interface Item Dec> ::= <Interface Property Dec>
379     <Interface Item Dec> ::= <Interface Event Dec>
380     <Interface Item Dec> ::= <Interface Indexer Dec>
381     <Interface Method Dec> ::= <Attrib Opt> <New Opt> <Type> Identifier '(' <Formal Param List Opt> ')' <Interface Empty Body>
382     <New Opt> ::= new
383     <New Opt> ::= 
384     <Interface Property Dec> ::= <Attrib Opt> <New Opt> <Type> Identifier '{' <Interface Accessors> '}'
385     <Interface Indexer Dec> ::= <Attrib Opt> <New Opt> <Type> this '[' <Formal Param List> ']' '{' <Interface Accessors> '}'
386     <Interface Accessors> ::= <Attrib Opt> <Access Opt> get <Interface Empty Body>
387     <Interface Accessors> ::= <Attrib Opt> <Access Opt> set <Interface Empty Body>
388     <Interface Accessors> ::= <Attrib Opt> <Access Opt> get <Interface Empty Body> <Attrib Opt> <Access Opt> set <Interface Empty Body>
389     <Interface Accessors> ::= <Attrib Opt> <Access Opt> set <Interface Empty Body> <Attrib Opt> <Access Opt> get <Interface Empty Body>
390     <Interface Event Dec> ::= <Attrib Opt> <New Opt> event <Type> Identifier <Interface Empty Body>
391     <Interface Empty Body> ::= ';'
392     <Interface Empty Body> ::= '{' '}'
393     <Enum Decl> ::= <Header> enum Identifier <Enum Base Opt> <Enum Body> <Semicolon Opt>
394     <Enum Base Opt> ::= ':' <Integral Type>
395     <Enum Base Opt> ::= 
396     <Enum Body> ::= '{' <Enum Item Decs Opt> '}'
397     <Enum Body> ::= '{' <Enum Item Decs> ',' '}'
398     <Enum Item Decs Opt> ::= <Enum Item Decs>
399     <Enum Item Decs Opt> ::= 
400     <Enum Item Decs> ::= <Enum Item Dec>
401     <Enum Item Decs> ::= <Enum Item Decs> ',' <Enum Item Dec>
402     <Enum Item Dec> ::= <Attrib Opt> Identifier
403     <Enum Item Dec> ::= <Attrib Opt> Identifier '=' <Expression>
404     <Delegate Decl> ::= <Header> delegate <Type> Identifier '(' <Formal Param List Opt> ')' ';'
405     <Attrib Opt> ::= <Attrib Opt> <Attrib Section>
406     <Attrib Opt> ::= 
407     <Attrib Section> ::= '[' <Attrib Target Spec Opt> <Attrib List> ']'
408     <Attrib Section> ::= '[' <Attrib Target Spec Opt> <Attrib List> ',' ']'
409     <Attrib Target Spec Opt> ::= assembly ':'
410     <Attrib Target Spec Opt> ::= field ':'
411     <Attrib Target Spec Opt> ::= event ':'
412     <Attrib Target Spec Opt> ::= method ':'
413     <Attrib Target Spec Opt> ::= module ':'
414     <Attrib Target Spec Opt> ::= param ':'
415     <Attrib Target Spec Opt> ::= property ':'
416     <Attrib Target Spec Opt> ::= return ':'
417     <Attrib Target Spec Opt> ::= type ':'
418     <Attrib Target Spec Opt> ::= 
419     <Attrib List> ::= <Attribute>
420     <Attrib List> ::= <Attrib List> ',' <Attribute>
421     <Attribute> ::= <Qualified ID> '(' <Expression List> ')'
422     <Attribute> ::= <Qualified ID> '(' ')'
423     <Attribute> ::= <Qualified ID>
